import os
import requests
from bs4 import BeautifulSoup
import re
from langdetect import detect
from deepseek.model import DeepSeekModel  # Adjust the import as needed

# --- Web scraping functions (if using URL input) ---
def get_clean_content(url):
    try:
        headers = {'User-Agent': 'Mozilla/5.0'}
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')
        main_content = soup.select_one('article, main, .content, .post, .entry')
        if not main_content:
            return "Main content not found. The entire page will be returned."
        for script in main_content(["script", "style", "nav", "li", "footer", "aside"]):
            script.decompose()
        text_lines = main_content.get_text(separator='\n', strip=True).split('\n')
        english_lines = []
        for line in text_lines:
            line = line.strip()
            if len(line) <= 10:
                continue
            try:
                if detect(line) == "en":
                    english_lines.append(line)
            except Exception:
                continue
        return " ".join(english_lines)
    except Exception as e:
        return f"Error: {e}"

def clean_text(text):
    text = text.replace('\n', ' ').replace('\r', ' ').replace('"', '|')
    text = re.sub(r'\s+', ' ', text)
    return text.strip()

# --- Connect DeepSeek ---
# Update this path to the absolute path of your trained DeepSeek model checkpoint.
model_path = "C:/absolute/path/to/your/trained/deepseek_model.ckpt"

if not os.path.exists(model_path):
    print("Error: The model file does not exist at the specified path. Please verify the path and filename.")
    exit()

try:
    model = DeepSeekModel.load_from_checkpoint(model_path)
except Exception as e:
    print("Error loading model:", e)
    exit()

# --- Process article and generate posts ---
def process_article(article_text):
    prompt = (
        "Summarize the following news article and convert it into three different social media posts for Twitter(X), "
        "Facebook, and Instagram. Each post should be tailored to fit the platform's style and audience expectations. "
        "Twitter should be short and snappy (max 280 characters), Facebook should provide more context and encourage discussion, "
        "and Instagram should have a catchy caption with engaging hashtags.\n\n"
        "News Article:\n" + article_text
    )
    return model.generate(prompt, max_tokens=300)

# --- Dynamic article retrieval ---
choice = input("Enter 'url' to fetch an article from a URL or 'text' to paste the article text: ").strip().lower()

if choice == 'url':
    url = input("Enter the URL of the news article: ").strip()
    article_text = get_clean_content(url)
    article_text = clean_text(article_text)
elif choice == 'text':
    article_text = input("Paste the news article text: ").strip()
else:
    print("Invalid choice. Exiting.")
    exit()

result = process_article(article_text)

print("\nGenerated Social Media Posts:")
print(result)
